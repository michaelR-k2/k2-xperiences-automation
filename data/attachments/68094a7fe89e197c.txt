# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: @experiences - Validar que la tabla de experiencias pueda ser filtrada por Destino
- Location: /home/runner/work/k2-xperiences-automation/k2-xperiences-automation/e2e/tests/modules/experiences/experiences.spec.js:48:5

# Error details

```
Error: locator.fill: Test timeout of 300000ms exceeded.
Call log:
  - waiting for locator('thead tr th:nth-child(5) input')

    at ExperiencesPage.filterTableByColumnAndAssert (/home/runner/work/k2-xperiences-automation/k2-xperiences-automation/e2e/pages/modules/experiencesPage.js:50:23)
    at /home/runner/work/k2-xperiences-automation/k2-xperiences-automation/e2e/tests/modules/experiences/experiences.spec.js:53:27
```

# Page snapshot

```yaml
- banner:
  - heading "Error 1015" [level=1]
  - text: "Ray ID: 9308d421cefae61f • 2025-04-15 04:51:35 UTC"
  - heading "You are being rate limited" [level=2]
- heading "What happened?" [level=2]
- paragraph: The owner of this website (xperiencesdev.masamo.tech) has banned you temporarily from accessing this website.
- text: Was this page helpful?
- button "Yes"
- button "No"
- paragraph:
  - text: "Cloudflare Ray ID:"
  - strong: 9308d421cefae61f
  - text: "• Your IP:"
  - button "Click to reveal"
  - text: • Performance & security by
  - link "Cloudflare"
```

# Test source

```ts
   1 | import { locator, page, expect } from "@playwright/test";
   2 | import BasePage from "../BasePage";
   3 |
   4 | export default class ExperiencesPage extends BasePage {
   5 |   constructor(page) {
   6 |     super(page);
   7 |
   8 |   }
   9 |
  10 |   async openEditExperienceByName(experience){
  11 |     const row = await this.page.locator('tbody tr', { hasText: experience }).first();
  12 |     const idCell = await row.locator('td').nth(1);
  13 |     const id = await idCell.textContent();
  14 |     return id?.trim();
  15 |   };
  16 |
  17 |   async filterByDateAndAssert(columnIndex, dateString) {
  18 |     const [day, month, year] = dateString.split('/').map(Number);
  19 |     const columnSelector = `thead tr th:nth-child(${columnIndex + 1})`;
  20 |     await this.page.locator(`${columnSelector} button[aria-haspopup="dialog"]`).click();
  21 |     const getCurrentMonthYear = async () => {
  22 |       const header = await this.page.locator('[role="dialog"] >> text=/^[A-Z][a-z]+ \\d{4}$/').textContent();
  23 |       const [currentMonthName, currentYear] = header.split(' ');
  24 |       const currentMonth = new Date(`${currentMonthName} 1, 2000`).getMonth() + 1;
  25 |       return { currentMonth, currentYear: parseInt(currentYear) };
  26 |     };
  27 |     while (true) {
  28 |       const { currentMonth, currentYear } = await getCurrentMonthYear();
  29 |       if (currentMonth === month && currentYear === year) break;
  30 |   
  31 |       if (currentYear > year || (currentYear === year && currentMonth > month)) {
  32 |         await this.page.locator('button[aria-label="Go to the Previous Month"]').click();
  33 |       } else {
  34 |         await this.page.locator('button[aria-label="Go to the Next Month"]').click();
  35 |       }
  36 |   
  37 |       await this.page.waitForTimeout(1000);
  38 |     }
  39 |     await this.page.locator(`button:has-text("${day}")`).first().click();
  40 |     await this.page.waitForTimeout(1000);
  41 |     await this.page.locator('body').click();
  42 |     const matchingCells = await this.page.locator(`tbody tr td:nth-child(${columnIndex + 1})`).allInnerTexts();
  43 |     
  44 |     const found = matchingCells.some(text => text.trim() === dateString);
  45 |     expect(found).toBeTruthy();
  46 |   };
  47 |
  48 |   async filterTableByColumnAndAssert(columnIndex, valueToFilter) {
  49 |     const filterInput = this.page.locator(`thead tr th:nth-child(${columnIndex + 1}) input`);
> 50 |     await filterInput.fill(valueToFilter);
     |                       ^ Error: locator.fill: Test timeout of 300000ms exceeded.
  51 |     await this.page.waitForTimeout(2500); 
  52 |     const matchingCells = await this.page.locator(`tbody tr td:nth-child(${columnIndex + 1})`).allInnerTexts();
  53 |
  54 |     const found = matchingCells.some(text => text.trim() === valueToFilter);
  55 |     expect(found).toBeTruthy();
  56 |   }
  57 | }
  58 |
```