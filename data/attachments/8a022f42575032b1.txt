# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: @vendors - Verificación del flujo de Creación de un Proveedor nuevo
- Location: /home/runner/work/k2-xperiences-automation/k2-xperiences-automation/e2e/tests/modules/vendors/vendors.spec.js:54:5

# Error details

```
Error: locator.fill: Test timeout of 300000ms exceeded.
Call log:
  - waiting for locator('input#name')

    at VendorsPage.createVendor (/home/runner/work/k2-xperiences-automation/k2-xperiences-automation/e2e/pages/modules/vendorsPage.js:38:26)
    at /home/runner/work/k2-xperiences-automation/k2-xperiences-automation/e2e/tests/modules/vendors/vendors.spec.js:59:23
```

# Test source

```ts
   1 | import { locator, page, expect } from "@playwright/test";
   2 | import BasePage from "../BasePage";
   3 |
   4 | export default class VendorsPage extends BasePage {
   5 |   constructor(page) {
   6 |     super(page);
   7 |     this.nameInput = page.locator('input#name');
   8 |     this.selectCountryButton = page.locator('div:has(label[for="location"]) > button');
   9 |     this.searchCountryInput = page.locator('input[placeholder="Search country..."]');
  10 |     this.dropdownContainer = page.locator('div[data-side="bottom"]');
  11 |     this.selectServicesButton = page.locator('div:has(label[for="services"]) > button');
  12 |     this.searchServiceInput = page.locator('input[placeholder="Search ..."]');
  13 |     this.contactVendorNameInput = page.locator('input[placeholder="Enter Contact vendor name"]');
  14 |     this.emailInput = page.locator('input[placeholder="Enter vendor email"]');
  15 |     this.selectPhoneButton = page.locator('div.PhoneInput  > button[aria-haspopup="dialog"]');
  16 |     this.phoneInput = page.locator('input[placeholder="Your phone"]');
  17 |     this.websiteInput = page.locator('input[placeholder="Enter vendor website"]');
  18 |     this.vendorDescription = page.locator('textarea[placeholder="Enter vendor description"]');
  19 |     this.vendorNotes = page.locator('textarea#comments');
  20 |     this.submitButton = page.locator('button[type="submit"]');
  21 |     this.statusDropdown = page.locator('div select');
  22 |     this.vendorsTable = page.locator("table tbody");
  23 |     this.allVendors = this.vendorsTable.locator("tr");
  24 |   }
  25 |
  26 |   async openEditVendorByName(vendorName){
  27 |       const row = await this.page.locator('tbody tr', { hasText: vendorName }).first();
  28 |       const idCell = await row.locator('td').nth(1);
  29 |       const id = await idCell.textContent();
  30 |       return id?.trim();
  31 |   };
  32 |
  33 |   async getVendorRowTable(vendorName) {
  34 |     return this.page.locator('tbody tr td:nth-child(3)', { hasText: vendorName });
  35 |   };
  36 |
  37 |   async createVendor(vendorData) {
> 38 |     await this.nameInput.fill(vendorData.name);
     |                          ^ Error: locator.fill: Test timeout of 300000ms exceeded.
  39 |     await this.selectCountryButton.click();
  40 |     await this.searchCountryInput.fill(vendorData.location);
  41 |     await this.dropdownContainer.locator('div.overflow-hidden > div span.text-sm', { hasText: new RegExp(`^${vendorData.location}$`, 'i') }).click();
  42 |     await this.selectServicesButton.click();
  43 |     for (const service of vendorData.services) {
  44 |       await this.searchServiceInput.fill(service);
  45 |       await this.dropdownContainer
  46 |         .locator('div.overflow-hidden > div[role="listbox"]', { hasText: new RegExp(`^${service}$`, 'i') })
  47 |         .click();
  48 |     }
  49 |     await this.page.click('body'); 
  50 |     await this.statusDropdown.selectOption(vendorData.status.toLowerCase());
  51 |     await this.contactVendorNameInput.fill(vendorData.contactVendorName);
  52 |     await this.emailInput.fill(vendorData.email);
  53 |     await this.selectPhoneButton.click();
  54 |     await this.searchCountryInput.fill(vendorData.location);
  55 |     await this.dropdownContainer.locator('div.overflow-hidden > div span.flex-1.text-sm', { hasText: new RegExp(`^${vendorData.location}$`, 'i') }).click();
  56 |     await this.phoneInput.fill(vendorData.phone);
  57 |     await this.websiteInput.fill(vendorData.website);
  58 |     await this.vendorDescription.fill(vendorData.vendorDescription);
  59 |     await this.vendorNotes.fill(vendorData.InternalNotes);
  60 |     await this.submitButton.click();
  61 |   }
  62 |
  63 |   async editVendor(vendorData) {
  64 |     await this.selectCountryButton.click();
  65 |     await this.searchCountryInput.fill(vendorData.location);
  66 |     await this.page.click('body'); 
  67 |     await this.vendorDescription.fill(vendorData.vendorDescription);
  68 |     await this.vendorNotes.fill(vendorData.InternalNotes);
  69 |     await this.submitButton.click();
  70 |   }
  71 | }
```