# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: @trip_users - Validar que la tabla de de Usuarios de Viaje pueda ser filtrada por Email
- Location: /home/runner/work/k2-xperiences-automation/k2-xperiences-automation/e2e/tests/modules/trip_users/trip_users.spec.js:60:5

# Error details

```
Error: locator.fill: Test timeout of 300000ms exceeded.
Call log:
  - waiting for locator('thead tr th:nth-child(3) input')

    at TripUsersPage.filterTableByColumnAndAssert (/home/runner/work/k2-xperiences-automation/k2-xperiences-automation/e2e/pages/modules/trip_usersPage.js:49:23)
    at /home/runner/work/k2-xperiences-automation/k2-xperiences-automation/e2e/tests/modules/trip_users/trip_users.spec.js:65:26
```

# Test source

```ts
   1 | import { locator, page, expect } from "@playwright/test";
   2 | import BasePage from "../BasePage";
   3 |
   4 | export default class TripUsersPage extends BasePage {
   5 |   constructor(page) {
   6 |     super(page);
   7 |     // ðŸ“„ Locators de la tabla
   8 |     this.usersTable = page.locator("table tbody");
   9 |     this.allUsers = this.usersTable.locator("tr");
  10 |     // ðŸ”„ PaginaciÃ³n
  11 |     this.rowsPerPageButton = page.locator("button[role='combobox']");
  12 |     this.paginationNext = page.locator("button[aria-label='Next page']");
  13 |     this.paginationPrev = page.locator("button[aria-label='Previous page']");
  14 |   }
  15 |
  16 |   async filterByDateAndAssert(columnIndex, dateString) {
  17 |     const [day, month, year] = dateString.split('/').map(Number);
  18 |     const columnSelector = `thead tr th:nth-child(${columnIndex})`;
  19 |     await this.page.locator(`${columnSelector} button[aria-haspopup="dialog"]`).click();
  20 |     const getCurrentMonthYear = async () => {
  21 |       const header = await this.page.locator('[role="dialog"] >> text=/^[A-Z][a-z]+ \\d{4}$/').textContent();
  22 |       const [currentMonthName, currentYear] = header.split(' ');
  23 |       const currentMonth = new Date(`${currentMonthName} 1, 2000`).getMonth() + 1;
  24 |       return { currentMonth, currentYear: parseInt(currentYear) };
  25 |     };
  26 |     while (true) {
  27 |       const { currentMonth, currentYear } = await getCurrentMonthYear();
  28 |       if (currentMonth === month && currentYear === year) break;
  29 |   
  30 |       if (currentYear > year || (currentYear === year && currentMonth > month)) {
  31 |         await this.page.locator('button[aria-label="Go to the Previous Month"]').click();
  32 |       } else {
  33 |         await this.page.locator('button[aria-label="Go to the Next Month"]').click();
  34 |       }
  35 |   
  36 |       await this.page.waitForTimeout(200);
  37 |     }
  38 |     await this.page.locator(`button:has-text("${day}")`).first().click();
  39 |     await this.page.waitForTimeout(500);
  40 |     await this.page.locator('body').click();
  41 |     const matchingCells = await this.page.locator(`tbody tr td:nth-child(${columnIndex})`).allInnerTexts();
  42 |     
  43 |     const found = matchingCells.some(text => text.trim() === dateString);
  44 |     expect(found).toBeTruthy();
  45 |   };
  46 |
  47 |   async filterTableByColumnAndAssert(columnIndex, valueToFilter) {
  48 |     const filterInput = this.page.locator(`thead tr th:nth-child(${columnIndex}) input`);
> 49 |     await filterInput.fill(valueToFilter);
     |                       ^ Error: locator.fill: Test timeout of 300000ms exceeded.
  50 |     await this.page.waitForTimeout(2500); 
  51 |     const matchingCells = await this.page.locator(`tbody tr td:nth-child(${columnIndex})`).allInnerTexts();
  52 |
  53 |     const found = matchingCells.some(text => text.trim() === valueToFilter);
  54 |     expect(found).toBeTruthy();
  55 |   }
  56 | }
  57 |
```