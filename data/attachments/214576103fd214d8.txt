# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: @trip_users - Validar que la tabla de de Usuarios de Viaje pueda ser filtrada por Nombre
- Location: /home/runner/work/k2-xperiences-automation/k2-xperiences-automation/e2e/tests/modules/trip_users/trip_users.spec.js:50:5

# Error details

```
Error: locator.fill: Test timeout of 300000ms exceeded.
Call log:
  - waiting for locator('thead tr th:nth-child(2) input')

    at TripUsersPage.filterTableByColumnAndAssert (/home/runner/work/k2-xperiences-automation/k2-xperiences-automation/e2e/pages/modules/trip_usersPage.js:58:23)
    at /home/runner/work/k2-xperiences-automation/k2-xperiences-automation/e2e/tests/modules/trip_users/trip_users.spec.js:55:26
```

# Page snapshot

```yaml
- banner:
  - heading "Error 1015" [level=1]
  - text: "Ray ID: 9308d411ca6c3aed â€¢ 2025-04-15 04:51:32 UTC"
  - heading "You are being rate limited" [level=2]
- heading "What happened?" [level=2]
- paragraph: The owner of this website (xperiencesdev.masamo.tech) has banned you temporarily from accessing this website.
- text: Was this page helpful?
- button "Yes"
- button "No"
- paragraph:
  - text: "Cloudflare Ray ID:"
  - strong: 9308d411ca6c3aed
  - text: "â€¢ Your IP:"
  - button "Click to reveal"
  - text: â€¢ Performance & security by
  - link "Cloudflare"
```

# Test source

```ts
   1 | import { locator, page, expect } from "@playwright/test";
   2 | import BasePage from "../BasePage";
   3 |
   4 | export default class TripUsersPage extends BasePage {
   5 |   constructor(page) {
   6 |     super(page);
   7 |     // ðŸ“„ Locators de la tabla
   8 |     this.usersTable = page.locator("table tbody");
   9 |     this.allUsers = this.usersTable.locator("tr");
  10 |     this.tableHeaders = page.locator("table thead tr th div span");
  11 |     // ðŸ”„ PaginaciÃ³n
  12 |     this.rowsPerPageButton = page.locator("button[role='combobox']");
  13 |     this.paginationNext = page.locator("button[aria-label='Next page']");
  14 |     this.paginationPrev = page.locator("button[aria-label='Previous page']");
  15 |   }
  16 |
  17 |   async getUserCount() {
  18 |     await this.page.waitForSelector("table tbody tr", {state: "attached"});
  19 |     return await this.allUsers.count();
  20 |   }
  21 |   async getTableHeaders() {
  22 |     await this.tableHeaders.first().waitFor({ state: "visible" });
  23 |     return await this.tableHeaders.allTextContents();
  24 |   }
  25 |   async filterByDateAndAssert(columnIndex, dateString) {
  26 |     const [day, month, year] = dateString.split('/').map(Number);
  27 |     const columnSelector = `thead tr th:nth-child(${columnIndex})`;
  28 |     await this.page.locator(`${columnSelector} button[aria-haspopup="dialog"]`).click();
  29 |     const getCurrentMonthYear = async () => {
  30 |       const header = await this.page.locator('[role="dialog"] >> text=/^[A-Z][a-z]+ \\d{4}$/').textContent();
  31 |       const [currentMonthName, currentYear] = header.split(' ');
  32 |       const currentMonth = new Date(`${currentMonthName} 1, 2000`).getMonth() + 1;
  33 |       return { currentMonth, currentYear: parseInt(currentYear) };
  34 |     };
  35 |     while (true) {
  36 |       const { currentMonth, currentYear } = await getCurrentMonthYear();
  37 |       if (currentMonth === month && currentYear === year) break;
  38 |   
  39 |       if (currentYear > year || (currentYear === year && currentMonth > month)) {
  40 |         await this.page.locator('button[aria-label="Go to the Previous Month"]').click();
  41 |       } else {
  42 |         await this.page.locator('button[aria-label="Go to the Next Month"]').click();
  43 |       }
  44 |   
  45 |       await this.page.waitForTimeout(200);
  46 |     }
  47 |     await this.page.locator(`button:has-text("${day}")`).first().click();
  48 |     await this.page.waitForTimeout(500);
  49 |     await this.page.locator('body').click();
  50 |     const matchingCells = await this.page.locator(`tbody tr td:nth-child(${columnIndex})`).allInnerTexts();
  51 |     
  52 |     const found = matchingCells.some(text => text.trim() === dateString);
  53 |     expect(found).toBeTruthy();
  54 |   };
  55 |
  56 |   async filterTableByColumnAndAssert(columnIndex, valueToFilter) {
  57 |     const filterInput = this.page.locator(`thead tr th:nth-child(${columnIndex}) input`);
> 58 |     await filterInput.fill(valueToFilter);
     |                       ^ Error: locator.fill: Test timeout of 300000ms exceeded.
  59 |     await this.page.waitForTimeout(2500); 
  60 |     const matchingCells = await this.page.locator(`tbody tr td:nth-child(${columnIndex})`).allInnerTexts();
  61 |
  62 |     const found = matchingCells.some(text => text.trim() === valueToFilter);
  63 |     expect(found).toBeTruthy();
  64 |   }
  65 | }
  66 |
```