# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: @Dashboard - Debe mostrar al menos una transacciÃ³n en la tabla de transacciones
- Location: /home/runner/work/k2-xperiences-automation/k2-xperiences-automation/e2e/tests/modules/dashboard/dashboard.spec.js:41:5

# Error details

```
Error: page.waitForSelector: Test timeout of 300000ms exceeded.
Call log:
  - waiting for locator('table tbody')

    at DashboardPage.getTransactionCount (/home/runner/work/k2-xperiences-automation/k2-xperiences-automation/e2e/pages/modules/dashboardPage.js:38:21)
    at /home/runner/work/k2-xperiences-automation/k2-xperiences-automation/e2e/tests/modules/dashboard/dashboard.spec.js:45:48
```

# Page snapshot

```yaml
- banner:
  - heading "Error 1015" [level=1]
  - text: "Ray ID: 93115c8f9b8b2d16 â€¢ 2025-04-16 05:42:49 UTC"
  - heading "You are being rate limited" [level=2]
- heading "What happened?" [level=2]
- paragraph: The owner of this website (xperiencesdev.masamo.tech) has banned you temporarily from accessing this website.
- text: Was this page helpful?
- button "Yes"
- button "No"
- paragraph:
  - text: "Cloudflare Ray ID:"
  - strong: 93115c8f9b8b2d16
  - text: "â€¢ Your IP:"
  - button "Click to reveal"
  - text: â€¢ Performance & security by
  - link "Cloudflare"
```

# Test source

```ts
   1 | import { locator, page, expect } from "@playwright/test";
   2 | import BasePage from "../BasePage";
   3 |
   4 | export default class DashboardPage extends BasePage {
   5 |   constructor(page) {
   6 |     super(page);
   7 |     // ðŸ“Š Locators de mÃ©tricas
   8 |     this.totalRevenue = page.locator('div.p-6.pb-2 h3', { hasText: 'Total Revenue' }).locator("..");
   9 |     this.subscriptions = page.locator('div.p-6.pb-2 h3', { hasText: 'Subscriptions' }).locator("..");
  10 |     this.sales = page.locator('div.p-6.pb-2 h3', { hasText: 'Sales' }).locator("..");
  11 |     this.activeNow = page.locator('div.p-6.pb-2 h3', { hasText: 'Active Now' }).locator("..");
  12 |     // ðŸ“„ Locators de transacciones
  13 |     this.transactionsTable = page.locator("table tbody");
  14 |     this.allTransactions = page.locator("table tbody tr");
  15 |     this.transactionRows = this.transactionsTable.locator("tr");
  16 |     // ðŸ”— BotÃ³n "View All"
  17 |     this.viewAllButton = page.locator(
  18 |       'a[href="/requests"]:has-text("View All")'
  19 |     );
  20 |   }
  21 |
  22 |   async goToDashboard() {
  23 |     await this.page.goto(`${process.env.BASEURL}/dashboard`);
  24 |   }
  25 |   async getTotalRevenue() {
  26 |     return await this.totalRevenueValue.textContent();
  27 |   }
  28 |   async getSubscriptions() {
  29 |     return await this.subscriptionsValue.textContent();
  30 |   }
  31 |   async getSales() {
  32 |     return await this.salesValue.textContent();
  33 |   }
  34 |   async getActiveNow() {
  35 |     return await this.activeNowValue.textContent();
  36 |   }
  37 |   async getTransactionCount() {
> 38 |     await this.page.waitForSelector("table tbody", { state: "attached" });
     |                     ^ Error: page.waitForSelector: Test timeout of 300000ms exceeded.
  39 |     await this.page.waitForSelector("table tbody tr", { state: "visible" });
  40 |     return await this.page.locator("table tbody tr").count();
  41 |   }
  42 |   async clickViewAll() {
  43 |     await this.viewAllButton.click();
  44 |     await this.page.waitForURL("/requests");
  45 |   }
  46 | }
  47 |
```