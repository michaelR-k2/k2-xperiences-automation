# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: @requests - Validar que la tabla de Solicitudes pueda ser filtrada por Tipo
- Location: /home/runner/work/k2-xperiences-automation/k2-xperiences-automation/e2e/tests/modules/requests/requests.spec.js:89:5

# Error details

```
Error: locator.fill: Test timeout of 300000ms exceeded.
Call log:
  - waiting for locator('thead tr th:nth-child(5) input')

    at RequestsPage.filterTableByColumnAndAssert (/home/runner/work/k2-xperiences-automation/k2-xperiences-automation/e2e/pages/BasePage.js:65:23)
    at /home/runner/work/k2-xperiences-automation/k2-xperiences-automation/e2e/tests/modules/requests/requests.spec.js:94:24
```

# Page snapshot

```yaml
- banner:
  - heading "Error 1015" [level=1]
  - text: "Ray ID: 935060f8cdb97bf2 • 2025-04-23 21:15:53 UTC"
  - heading "You are being rate limited" [level=2]
- heading "What happened?" [level=2]
- paragraph: The owner of this website (xperiencesdev.masamo.tech) has banned you temporarily from accessing this website.
- text: Was this page helpful?
- button "Yes"
- button "No"
- paragraph:
  - text: "Cloudflare Ray ID:"
  - strong: 935060f8cdb97bf2
  - text: "• Your IP:"
  - button "Click to reveal"
  - text: • Performance & security by
  - link "Cloudflare"
```

# Test source

```ts
   1 | import { expect } from '@playwright/test';
   2 |
   3 | export default class BasePage {
   4 |   constructor(page) {
   5 |     this.page = page;
   6 |     this.dashboardLink = page.locator('nav a[href*="/dashboard"]');
   7 |     this.requestsLink = page.locator('nav a[href*="/requests"]');
   8 |     this.projectsLink = page.locator('nav a[href*="/projects"]');
   9 |     this.experiencesLink = page.locator('nav a[href*="/experiences"]');
  10 |     this.vendorsLink = page.locator('nav a[href*="/vendors"]');
  11 |     this.tripUsersLink = page.locator('nav a[href*="/trip-users"]');
  12 |     this.filesLink = page.locator('nav a[href*="/files"]');
  13 |     this.tableHeaders = page.locator("table thead tr th div span");
  14 |     this.table = page.locator("table tbody");
  15 |     this.alltableItems = this.table.locator("tr");
  16 |   }
  17 |
  18 |   async getCurrentUrl() {
  19 |     return this.page.url();
  20 |   }
  21 |
  22 |   async getTableHeaders() {
  23 |     await this.tableHeaders.first().waitFor({ state: "visible" });
  24 |     return await this.tableHeaders.allTextContents();
  25 |   }
  26 |
  27 |   async getTableRowsCount() {
  28 |     await this.page.waitForSelector("table tbody tr", {state: "attached"});
  29 |     return await this.alltableItems.count(); 
  30 |   }
  31 |
  32 |   async filterByDateAndAssert(columnIndex, dateString) {
  33 |     const [day, month, year] = dateString.split('/').map(Number);
  34 |     const columnSelector = `thead tr th:nth-child(${columnIndex + 1})`;
  35 |     await this.page.locator(`${columnSelector} button[aria-haspopup="dialog"]`).click();
  36 |     const getCurrentMonthYear = async () => {
  37 |       const header = await this.page.locator('[role="dialog"] >> text=/^[A-Z][a-z]+ \\d{4}$/').textContent();
  38 |       const [currentMonthName, currentYear] = header.split(' ');
  39 |       const currentMonth = new Date(`${currentMonthName} 1, 2000`).getMonth() + 1;
  40 |       return { currentMonth, currentYear: parseInt(currentYear) };
  41 |     };
  42 |     while (true) {
  43 |       const { currentMonth, currentYear } = await getCurrentMonthYear();
  44 |       if (currentMonth === month && currentYear === year) break;
  45 |   
  46 |       if (currentYear > year || (currentYear === year && currentMonth > month)) {
  47 |         await this.page.locator('button[aria-label="Go to the Previous Month"]').click();
  48 |       } else {
  49 |         await this.page.locator('button[aria-label="Go to the Next Month"]').click();
  50 |       }
  51 |   
  52 |       await this.page.waitForTimeout(1000);
  53 |     }
  54 |     await this.page.locator(`button:has-text("${day}")`).first().click();
  55 |     await this.page.waitForTimeout(1000);
  56 |     await this.page.locator('body').click();
  57 |     const matchingCells = await this.page.locator(`tbody tr td:nth-child(${columnIndex + 1})`).allInnerTexts();
  58 |     
  59 |     const found = matchingCells.some(text => text.trim() === dateString);
  60 |     expect(found).toBeTruthy();
  61 |   };
  62 |
  63 |   async filterTableByColumnAndAssert(columnIndex, valueToFilter) {
  64 |     const filterInput = this.page.locator(`thead tr th:nth-child(${columnIndex + 1}) input`);
> 65 |     await filterInput.fill(valueToFilter);
     |                       ^ Error: locator.fill: Test timeout of 300000ms exceeded.
  66 |     await this.page.waitForTimeout(2500); 
  67 |     const matchingCells = await this.page.locator(`tbody tr td:nth-child(${columnIndex + 1})`).allInnerTexts();
  68 |
  69 |     const found = matchingCells.some(text => text.trim().includes(valueToFilter));
  70 |     expect(found).toBeTruthy();
  71 |   }
  72 |
  73 |   async filterTableByStatusAndAssert(columnIndex, valueToFilter) {
  74 |     const filterInput = this.page.locator(`thead tr th:nth-child(${columnIndex + 1}) button[role="combobox"]`);
  75 |     await filterInput.click();
  76 |     const regex = new RegExp(`^${valueToFilter.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')}$`);
  77 |     await this.page.locator('div[data-radix-popper-content-wrapper]').getByText(regex).click();
  78 |     await this.page.waitForTimeout(1000); 
  79 |     const matchingCells = await this.page.locator(`tbody tr td:nth-child(${columnIndex + 1})`).allInnerTexts();
  80 |
  81 |     const found = matchingCells.some(text => text.trim().includes(valueToFilter));
  82 |     expect(found).toBeTruthy();
  83 |   }
  84 |
  85 |   delay = (milliseconds) => new Promise((resolve) => setTimeout(resolve, milliseconds));
  86 | }
  87 |
```