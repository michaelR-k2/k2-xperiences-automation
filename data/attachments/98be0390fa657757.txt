# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: @vendors - Validar que la tabla de usuarios de Proveedores tenga al menos un registro
- Location: /home/runner/work/k2-xperiences-automation/k2-xperiences-automation/e2e/tests/modules/vendors/vendors.spec.js:66:5

# Error details

```
Error: page.waitForSelector: Test timeout of 300000ms exceeded.
Call log:
  - waiting for locator('table tbody tr')

    at VendorsPage.getVendorsCount (/home/runner/work/k2-xperiences-automation/k2-xperiences-automation/e2e/pages/modules/vendorsPage.js:37:21)
    at /home/runner/work/k2-xperiences-automation/k2-xperiences-automation/e2e/tests/modules/vendors/vendors.spec.js:71:46
```

# Test source

```ts
   1 | import { locator, page, expect } from "@playwright/test";
   2 | import BasePage from "../BasePage";
   3 |
   4 | export default class VendorsPage extends BasePage {
   5 |   constructor(page) {
   6 |     super(page);
   7 |     this.nameInput = page.locator('input#name');
   8 |     this.selectCountryButton = page.locator('div:has(label[for="location"]) > button');
   9 |     this.searchCountryInput = page.locator('input[placeholder="Search country..."]');
   10 |     this.dropdownContainer = page.locator('div[data-side="bottom"]');
   11 |     this.selectServicesButton = page.locator('div:has(label[for="services"]) > button');
   12 |     this.searchServiceInput = page.locator('input[placeholder="Search ..."]');
   13 |     this.contactVendorNameInput = page.locator('input[placeholder="Enter Contact vendor name"]');
   14 |     this.emailInput = page.locator('input[placeholder="Enter vendor email"]');
   15 |     this.selectPhoneButton = page.locator('div.PhoneInput  > button[aria-haspopup="dialog"]');
   16 |     this.phoneInput = page.locator('input[placeholder="Your phone"]');
   17 |     this.websiteInput = page.locator('input[placeholder="Enter vendor website"]');
   18 |     this.vendorDescription = page.locator('textarea[placeholder="Enter vendor description"]');
   19 |     this.vendorNotes = page.locator('textarea#comments');
   20 |     this.submitButton = page.locator('button[type="submit"]');
   21 |     this.statusDropdown = page.locator('div select');
   22 |     this.vendorsTable = page.locator("table tbody");
   23 |     this.allVendors = this.vendorsTable.locator("tr");
   24 |     this.tableHeaders = page.locator("table thead tr th div span");
   25 |   }
   26 |
   27 |   async openEditVendorByName(vendorName){
   28 |       const row = await this.page.locator('tbody tr', { hasText: vendorName }).first();
   29 |       const idCell = await row.locator('td').nth(1);
   30 |       const id = await idCell.textContent();
   31 |       return id?.trim();
   32 |   };
   33 |   async getVendorRowTable(vendorName) {
   34 |     return this.page.locator('tbody tr td:nth-child(3)', { hasText: vendorName });
   35 |   };
   36 |   async getVendorsCount() {
>  37 |     await this.page.waitForSelector("table tbody tr", {state: "attached"});
      |                     ^ Error: page.waitForSelector: Test timeout of 300000ms exceeded.
   38 |     return await this.allVendors.count(); 
   39 |   }
   40 |   async getTableHeaders() {
   41 |     await this.tableHeaders.first().waitFor({ state: "visible" });
   42 |     return await this.tableHeaders.allTextContents();
   43 |   }
   44 |   async createVendor(vendorData) {
   45 |     await this.nameInput.fill(vendorData.name);
   46 |     await this.selectCountryButton.click();
   47 |     await this.searchCountryInput.fill(vendorData.location);
   48 |     await this.dropdownContainer.locator('div.overflow-hidden > div span.text-sm', { hasText: new RegExp(`^${vendorData.location}$`, 'i') }).click();
   49 |     await this.selectServicesButton.click();
   50 |     for (const service of vendorData.services) {
   51 |       await this.searchServiceInput.fill(service);
   52 |       await this.dropdownContainer
   53 |         .locator('div.overflow-hidden > div[role="listbox"]', { hasText: new RegExp(`^${service}$`, 'i') })
   54 |         .click();
   55 |     }
   56 |     await this.page.click('body'); 
   57 |     await this.statusDropdown.selectOption(vendorData.status.toLowerCase());
   58 |     await this.contactVendorNameInput.fill(vendorData.contactVendorName);
   59 |     await this.emailInput.fill(vendorData.email);
   60 |     await this.selectPhoneButton.click();
   61 |     await this.searchCountryInput.fill(vendorData.location);
   62 |     await this.dropdownContainer.locator('div.overflow-hidden > div span.flex-1.text-sm', { hasText: new RegExp(`^${vendorData.location}$`, 'i') }).click();
   63 |     await this.phoneInput.fill(vendorData.phone);
   64 |     await this.websiteInput.fill(vendorData.website);
   65 |     await this.vendorDescription.fill(vendorData.vendorDescription);
   66 |     await this.vendorNotes.fill(vendorData.InternalNotes);
   67 |     await this.submitButton.click();
   68 |   }
   69 |
   70 |   async editVendor(vendorData) {
   71 |     await this.selectCountryButton.click();
   72 |     await this.searchCountryInput.fill(vendorData.location);
   73 |     await this.page.click('body'); 
   74 |     await this.vendorDescription.fill(vendorData.vendorDescription);
   75 |     await this.vendorNotes.fill(vendorData.InternalNotes);
   76 |     await this.submitButton.click();
   77 |   }
   78 |
   79 |   async filterByDateAndAssert(columnIndex, dateString) {
   80 |     const [day, month, year] = dateString.split('/').map(Number);
   81 |     const columnSelector = `thead tr th:nth-child(${columnIndex + 1})`;
   82 |     await this.page.locator(`${columnSelector} button[aria-haspopup="dialog"]`).click();
   83 |     const getCurrentMonthYear = async () => {
   84 |       const header = await this.page.locator('[role="dialog"] >> text=/^[A-Z][a-z]+ \\d{4}$/').textContent();
   85 |       const [currentMonthName, currentYear] = header.split(' ');
   86 |       const currentMonth = new Date(`${currentMonthName} 1, 2000`).getMonth() + 1;
   87 |       return { currentMonth, currentYear: parseInt(currentYear) };
   88 |     };
   89 |     while (true) {
   90 |       const { currentMonth, currentYear } = await getCurrentMonthYear();
   91 |       if (currentMonth === month && currentYear === year) break;
   92 |   
   93 |       if (currentYear > year || (currentYear === year && currentMonth > month)) {
   94 |         await this.page.locator('button[aria-label="Go to the Previous Month"]').click();
   95 |       } else {
   96 |         await this.page.locator('button[aria-label="Go to the Next Month"]').click();
   97 |       }
   98 |   
   99 |       await this.page.waitForTimeout(1000);
  100 |     }
  101 |     await this.page.locator(`button:has-text("${day}")`).first().click();
  102 |     await this.page.waitForTimeout(1000);
  103 |     await this.page.locator('body').click();
  104 |     const matchingCells = await this.page.locator(`tbody tr td:nth-child(${columnIndex + 1})`).allInnerTexts();
  105 |     
  106 |     const found = matchingCells.some(text => text.trim() === dateString);
  107 |     expect(found).toBeTruthy();
  108 |   };
  109 |
  110 |   async filterTableByColumnAndAssert(columnIndex, valueToFilter) {
  111 |     const filterInput = this.page.locator(`thead tr th:nth-child(${columnIndex + 1}) input`);
  112 |     await filterInput.fill(valueToFilter);
  113 |     await this.page.waitForTimeout(2500); 
  114 |     const matchingCells = await this.page.locator(`tbody tr td:nth-child(${columnIndex + 1})`).allInnerTexts();
  115 |
  116 |     const found = matchingCells.some(text => text.trim() === valueToFilter);
  117 |     expect(found).toBeTruthy();
  118 |   }
  119 | }
```